from pathlib import Path


configfile: "config/config.yaml"


WORKFLOW = Path("workflow").resolve()
RULES = WORKFLOW / "rules"
ENVS = WORKFLOW / "envs"
SCRIPTS = WORKFLOW / "scripts"
RESULTS = Path("results").resolve()
BENCH = RESULTS / "benchmark"
LOGS = Path("logs/rules").resolve()
CONTAINERS = config["containers"]
RESOURCES = Path("resources").resolve()
GB = 1_000
EXTENSIONS = {"gzip": "gz", "bzip2": "bz2", "xz": "xz", "zstd": "zst", "brotli": "br"}
combos = []
target_files = set()

nanopore_accessions = config["accessions"]["nanopore"]
illumina_accessions = config["accessions"]["illumina"]
for tool, rng in config["compression_level_ranges"].items():
    s = rng[0]
    e = rng[-1]

    for lvl in range(s, e + 1):
        for acc in nanopore_accessions:
            target_files.add(BENCH / f"decompress/{tool}/{lvl}/nanopore/{acc}.tsv")
            combos.append([tool, lvl, "nanopore", acc])
        for acc in illumina_accessions:
            target_files.add(BENCH / f"decompress/{tool}/{lvl}/illumina/{acc}.tsv")
            combos.append([tool, lvl, "illumina", acc])

target_files.add(RESULTS / "figures/compression_ratio.png")
target_files.add(RESULTS / "figures/rate_and_memory.png")
target_files.add(RESULTS / "figures/pareto_frontier.png")


localrules:
    all,
    aggregate_sizes,


rule all:
    input:
        target_files,


include: RULES / "download.smk"
include: RULES / "compress.smk"
include: RULES / "decompress.smk"
include: RULES / "report.smk"
